{
  "author": {
    "name": "Jakob Borg",
    "email": "jakob@nym.se",
    "url": "http://nym.se/"
  },
  "name": "sudo",
  "description": "Wrap sudo with optional password cache",
  "version": "1.0.3",
  "homepage": "https://github.com/calmh/node-sudo",
  "repository": {
    "type": "git",
    "url": "git://github.com/calmh/node-sudo.git"
  },
  "main": "lib/sudo.js",
  "dependencies": {
    "inpath": "~1.0.2",
    "read": "~1.0.3",
    "pidof": "~1.0.2"
  },
  "devDependencies": {},
  "optionalDependencies": {},
  "engines": {
    "node": ">=0.8"
  },
  "readme": "node-sudo\n=========\n\nA `child_process.spawn` but with `sudo` in between. The `sudo` password dialog\nis abstracted away so that the calling Node script can interact with the\nprogram that is run under `sudo` without worrying about it.\n\nSynopsis\n--------\n\n```javascript\nsudo(args, options)\n```\n\n - `args`: An array of arguments to `sudo`. Can be both options (such as `-v`\n   or `-E`) and the program to run. Example: `['ls']`.\n\n - `options`: An optional object containing options. Recognized options are:\n\n    - `cachePassword`: Boolean; whether to remember the password between\n      invocations or not.\n\n    - `prompt`: String; what to display to the user when the password is\n      needed.\n\n    - `spawnOptions`: Object; passed on directly to `spawn`. `stdio` or\n      `customFds` will be overwritten.\n\nExample\n-------\n\n```javascript\nvar sudo = require('sudo');\nvar options = {\n    cachePassword: true,\n    prompt: 'Password, yo? ',\n    spawnOptions: { /* other options for spawn */ }\n};\nvar child = sudo([ 'ls', '-l', '/tmp' ], options);\nchild.stdout.on('data', function (data) {\n    console.log(data.toString());\n});\n```\n\nLicense\n-------\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/calmh/node-sudo/issues"
  },
  "_id": "sudo@1.0.3",
  "_from": "sudo@1.0.x"
}
